#! /usr/bin/env bash

# Build a specific package in the context of FPM's Docker container.
# https://fpm.readthedocs.io/
#
# Do not use any system package manager here.

set -eo pipefail
version="${1:-now}"
install_dir=/usr/lib/pash
if [ -n "$1" ]; then shift; fi
set -u


print_dotfpm() {
    local output_format="$1"
    local after_install="$2"

    # I/O rules, with Docker container paths
    flag --chdir /src
    flag --input-type dir
    flag --output-type "$output_format"
    flag --log info
    flag --verbose
    flag --force

    # Discovery information
    flag --name pash
    flag --description "Parallelize POSIX shell scripts"
    flag --license mit
    flag --architecture all
    flag --url 'https://github.com/binpash/pash'
    flag --version "$version"

    # Pass control to PaSh after installation
    flag --after-install "$after_install"

    # Target information
    case "$output_format" in
	deb)
	    print_dotfpm_deb
	    ;;
	freebsd)
	    print_dotfpm_freebsd
	    ;;
	pacman)
	    print_dotfpm_pacman
	    ;;
	python)
	    print_dotfpm_python
	    ;;
	rpm)
	    print_dotfpm_rpm
	    ;;
	*)
	    printf "Unsupported format: '%s'" "output_format" 1>&2
	    exit 1
	    ;;
    esac

    # Map contents from here to target system.
    #
    # TODO: Consider include-only approach.  This will pick up any
    # junk not expressly excluded. Maybe bind to Git's tracked files?
    flag --exclude '*.git*'
    flag --exclude '*.pyc'
    flag --exclude '*__pycache__*'
    flag --exclude '*compiler/parser/libdash*'
    flag --exclude '*python_pkg*'
    flag --exclude '*package/output*'
    flag --exclude '*package/fpm*'

    printf ".=%s\n" "$install_dir"
}


#
# Target-specific flags
#

print_dotfpm_pacman() {
    # FPM seems to think every tar binary supports --zstd
    # at time of writing, so fall back to gzip on Arch.
    print_dotfpm_output_path .tar.gz
    flag --pacman-compression gz

    flag --depends autoconf
    flag --depends automake
    flag --depends bash
    flag --depends bc
    flag --depends curl
    flag --depends gcc
    flag --depends git
    flag --depends inetutils
    flag --depends libffi
    flag --depends libtool
    flag --depends m4
    flag --depends make
    flag --depends openbsd-netcat
    flag --depends pkg-config
    flag --depends python
    flag --depends python-pip
    flag --depends sudo
    flag --depends wget
}


print_dotfpm_rpm() {
    print_dotfpm_output_path .rpm

    flag --depends autoconf
    flag --depends automake
    flag --depends bash
    flag --depends bc
    flag --depends curl
    flag --depends diffutils
    flag --depends gcc
    flag --depends gcc-c++
    flag --depends git
    flag --depends glibc-langpack-en
    flag --depends hostname
    flag --depends libjpeg-devel
    flag --depends libtool
    flag --depends libtool
    flag --depends m4
    flag --depends make
    flag --depends nc
    flag --depends pip
    flag --depends pkg-config
    flag --depends procps
    flag --depends python
    flag --depends python-devel
    flag --depends python3
    flag --depends python3-pip
    flag --depends python3-setuptools
    flag --depends python3-testresources
    flag --depends wget
    flag --depends zlib-devel
}


print_dotfpm_deb() {
    print_dotfpm_output_path .deb

    flag --depends autoconf
    flag --depends automake
    flag --depends bash
    flag --depends bc
    flag --depends bsdmainutils
    flag --depends curl
    flag --depends g++-10
    flag --depends git
    flag --depends libffi-dev
    flag --depends libtool
    flag --depends locales
    flag --depends locales-all
    flag --depends m4
    flag --depends netcat-openbsd
    flag --depends pkg-config
    flag --depends python3-pip
    flag --depends python3-setuptools
    flag --depends python3-testresources
    flag --depends wamerican-insane
    flag --depends wget
}


print_dotfpm_python() {
    # TODO: Is this extension correct?
    print_dotfpm_output_path .tar

    # Handle requirements.txt with `python3 -m pip`
    # That is, the 'internal' pip.
    flag --python-bin /bin/python3
    flag --python-obey-requirements-txt
    flag --python-internal-pip
}


print_dotfpm_freebsd() {
    # TODO: Is this extension correct?
    print_dotfpm_output_path .tar

    flag --depends autoconf
    flag --depends automake
    flag --depends bash
    flag --depends bc
    flag --depends curl
    flag --depends gcc
    flag --depends git
    flag --depends gmake
    flag --depends gsed
    flag --depends libffi
    flag --depends libtool
    flag --depends m4
    flag --depends pkg-config
    flag --depends py38-pip
    flag --depends wget
}



print_dotfpm_output_path() {
    output_file="${output_file_prefix}${1}"
    flag --package "$output_file"
}

# Post-installation steps depend on the target.  Rather than ask one
# script to entertain every platform, dispatch to a specialized
# script.
print_post_install_script() {
    local output_format="$1"
    printf '#! /usr/bin/env bash\n'
    printf "/usr/lib/pash/scripts/package/fire-hook.sh 'after-install' '%s'\n" "$output_format"
}

#
# The rest defines how the above works.
#

flag() {
    if [ "$#" -gt 1 ]; then
	printf "%s '%s'\n" "$1" "$2"
    else
	printf "%s\n" "$1"
    fi
}


main() {
    for output_format in "$@"; do
	after_install="$(mktemp)"
        print_post_install_script "$output_format" > "$after_install"
	cat "$after_install"
	output_file_prefix="/out/pash-${version}"

	print_dotfpm "$output_format" "$after_install" > .fpm

	set +e
	/fpm/bin/fpm && chmod 440 "$output_file"
	rm -vf "$after_install" .fpm
	set -e
	printf '\n'
    done
}

main "$@"
